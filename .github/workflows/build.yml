name: Build CI

on:
  push:
    branches: ['main']
  pull_request:
  workflow_dispatch:

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}-${{ matrix.config.os-version }}

    strategy:
      fail-fast: false
      matrix:
        config:
          - name: Windows MSVC
            os: windows
            os-version: 2022
            environment: msvc
            shell: pwsh

          - name: Windows MingGW
            os: windows
            os-version: 2022
            environment: mingw
            architecture: x86_64
            shell: 'msys2 {0}'

          - name: Windows UCRT
            os: windows
            os-version: 2022
            environment: ucrt
            architecture: ucrt-x86_64
            shell: 'msys2 {0}'

          - name: Linux
            os: ubuntu
            os-version: 24.04
            use-clang: false
            shell: bash

          - name: Linux Clang (libstdc++)
            os: ubuntu
            os-version: 24.04
            use-clang: true
            use-clang_stdlib: false
            shell: bash

          - name: Linux Clang (libc++)
            os: ubuntu
            os-version: 24.04
            use-clang: true
            use-clang_stdlib: true
            shell: bash

          - name: MacOS
            os: macos
            os-version: 13
            arm: false
            shell: bash

          - name: MacOS (Arm64)
            os: macos
            os-version: 14
            arm: true
            shell: bash

    defaults:
      run:
        shell: ${{ matrix.config.shell }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: '0'

      - name: Setup MSVC (Windows)
        if: matrix.config.os == 'windows' && matrix.config.environment == 'msvc'
        uses: TheMrMilchmann/setup-msvc-dev@v3
        with:
          arch: x64
          toolset: '14.41'

      - name: Setup MYSYS2 (Windows)
        if: matrix.config.os == 'windows' && ( matrix.config.environment == 'mingw' || matrix.config.environment == 'ucrt' )
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{matrix.config.environment == 'mingw' && 'MINGW64' || 'UCRT64'}}
          update: true
          install: >-
            mingw-w64-${{matrix.config.architecture}}-gcc
            mingw-w64-${{matrix.config.architecture}}-ninja
            mingw-w64-${{matrix.config.architecture}}-python
            mingw-w64-${{matrix.config.architecture}}-python-pip
            mingw-w64-${{matrix.config.architecture}}-SDL2
            mingw-w64-${{matrix.config.architecture}}-SDL2_ttf
            mingw-w64-${{matrix.config.architecture}}-SDL2_mixer
            mingw-w64-${{matrix.config.architecture}}-SDL2_image
            mingw-w64-${{matrix.config.architecture}}-pkg-config
            mingw-w64-${{matrix.config.architecture}}-ca-certificates
            mingw-w64-${{matrix.config.architecture}}-cmake
            git

      - name: Setup Clang (Linux) (libc++)
        if: matrix.config.os == 'ubuntu' && matrix.config.use-clang == true && matrix.config.use-clang_stdlib
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 19
          sudo apt-get install libc++-19* libc++abi*19* -y --no-install-recommends
          echo "CC=clang-19" >> "$GITHUB_ENV"
          echo "CXX=clang++-19" >> "$GITHUB_ENV"
          echo "OBJC=clang-19" >> "$GITHUB_ENV"

      - name: Setup Clang (Linux) (libstdc++)
        if: matrix.config.os == 'ubuntu' && matrix.config.use-clang == true && (! matrix.config.use-clang_stdlib)
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 19
          echo "CC=clang-19" >> "$GITHUB_ENV"
          echo "CXX=clang++-19" >> "$GITHUB_ENV"
          echo "OBJC=clang-19" >> "$GITHUB_ENV"
          # Patch the libstd++ library, see https://gcc.gnu.org/bugzilla/show_bug.cgi?id=115119
          # This is a dirty workaround, but it is needed, since gcc 14.2 (where this was patched usptream) is not easily available
          # If we use the oracular (Ubuntu 24.10) repos, we could install gcc 14.2, but clang-19 isn't compatible with that
          # TODO: remove this, after it works again
          sudo patch -p1 /usr/include/c++/14/bits/unicode.h .github/patches/gcc_14_2.diff

      - name: Setup GCC (Linux)
        if: matrix.config.os == 'ubuntu' && matrix.config.use-clang == false
        uses: egor-tensin/setup-gcc@v1
        with:
          version: 14
          platform: x64

      - name: Setup Clang (MacOS)
        if: matrix.config.os == 'macos'
        run: |
          brew update
          # TODO annotate with lld@19, after that is accepted, we don't want to use lld@20 without manually updating it !
          brew install llvm@19 lld
          echo "$(brew --prefix)/opt/llvm/bin" >> $GITHUB_PATH
          echo "LDFLAGS=-L$(brew --prefix)/opt/llvm/lib -L$(brew --prefix)/opt/llvm/lib/c++ -Wl,-rpath,$(brew --prefix)/opt/llvm/lib/c++" >> "$GITHUB_ENV"
          echo "CPPFLAGS=-I$(brew --prefix)/opt/llvm/include" >> "$GITHUB_ENV"
          echo "CC=clang" >> "$GITHUB_ENV"
          echo "CXX=clang++" >> "$GITHUB_ENV"
          echo "OBJC=clang" >> "$GITHUB_ENV"
          echo "CC_LD=lld" >> "$GITHUB_ENV"
          echo "CXX_LD=lld" >> "$GITHUB_ENV"
          echo "OBJC_LD=lld" >> "$GITHUB_ENV"

      - name: Unbreak Python in GHA (MacOS 13 image)
        if: matrix.config.os == 'macos' && matrix.config.os-version == 13
        run: |
          # TODO: remove this, after it works again
          # A workaround for "The `brew link` step did not complete successfully" error.
          # See e.g. https://github.com/Homebrew/homebrew-core/issues/165793#issuecomment-1991817938
          find /usr/local/bin -lname '*/Library/Frameworks/Python.framework/*' -delete
          sudo rm -rf /Library/Frameworks/Python.framework/
          brew install --force python3 && brew unlink python3 && brew unlink python3 && brew link --overwrite python3

      - name: Setup meson (MacOS)
        if: matrix.config.os == 'macos'
        run: |
          brew update
          brew install meson

      # NOTE: meson has no dependencies, so --break-system-packages doesn't really break anything!
      - name: Setup meson
        if: matrix.config.os != 'macos'
        run: |
          pip install meson --break-system-packages

      - name: Install dependencies (Linux)
        if: matrix.config.os == 'ubuntu'
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build libsdl2-2.0-0 libsdl2-dev libsdl2-ttf* libsdl2-mixer* libsdl2-image* -y --no-install-recommends

      - name: Install dependencies (MacOS)
        if: matrix.config.os == 'macos'
        run: |
          brew update
          brew install sdl2 sdl2_ttf sdl2_mixer sdl2_image

      - name: Configure
        run: meson setup build -Dbuildtype=release -Ddefault_library=shared -Dclang_libcpp=${{ ( ( matrix.config.os == 'ubuntu' && matrix.config.use-clang == true && matrix.config.use-clang_stdlib ) || matrix.config.os == 'macos' ) && 'enabled' || 'disabled' }}

      - name: Build
        run: meson compile -C build

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.config.name }} Executable
          path: build/src/executables/oopetris*
